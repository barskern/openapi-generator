use headers::{Header, HeaderName, HeaderValue};
{{#apiInfo}}
    {{#apis}}
        {{#operations}}
            {{#operation}}
                {{#responses}}
                    {{#headers}}
/// Header {{{nameInCamelCase}}}: {{{baseName}}} => {{{datatype}}}
pub struct Response{{{nameInCamelCase}}}({{{datatype}}});

impl Header for Response{{{nameInCamelCase}}} {
    fn name() -> &'static HeaderName {
        &HeaderName::from_static("{{{baseName}}}")
    }

    fn decode<'i, I>(values: &mut I) -> Result<Self, headers::Error>
        where
            I: Iterator<Item = &'i HeaderValue>,
    {
        let value = values
            .next()
            .ok_or_else(headers::Error::invalid)?;

        Ok(Response{{{nameInCamelCase}}}(value.parse()))
    }

    fn encode<E>(&self, values: &mut E)
        where
            E: Extend<HeaderValue>,
    {
        let value = HeaderValue::from_static(self.0);

        values.extend(std::iter::once(value));
    }
}
                    {{/headers}}
                {{/responses}}

                {{#headerParams}}
/// Header {{vendorExtensions.typeName}}: {{{baseName}}} => {{#isListContainer}}({{{baseType}}})*{{/isListContainer}}{{^isListContainer}}[{{{dataType}}}]{{/isListContainer}}
pub struct Request{{vendorExtensions.typeName}}({{#isListContainer}}({{{baseType}}})*{{/isListContainer}}{{^isListContainer}}[{{{dataType}}}]{{/isListContainer}});
impl Header for Request{{vendorExtensions.typeName}} {
    fn name() -> &'static HeaderName {
        &HeaderName::from_static("{{{baseName}}}")
    }

    fn decode<'i, I>(values: &mut I) -> Result<Self, headers::Error>
        where
            I: Iterator<Item = &'i HeaderValue>,
    {
        let value = values
            .next()
            .ok_or_else(headers::Error::invalid)?;

        Ok(Response{{{nameInCamelCase}}}(value.parse()))
    }

    fn encode<E>(&self, values: &mut E)
        where
            E: Extend<HeaderValue>,
    {
        let value = HeaderValue::from_static(self.0);

        values.extend(std::iter::once(value));
    }
}
                {{/headerParams}}
            {{/operation}}
        {{/operations}}
    {{/apis}}
{{/apiInfo}}